#The Little 2 next to the right bottom implies that the base is 2.When the base is  2 , we represent using two numbers only 0 and 1. 
#(S1 (S (NP (NP (DT The) (NNP Little) (CD 2)) (ADVP (JJ next) (PP (TO to) (NP (DT the) (JJ right) (NN bottom))))) (VP (VBZ implies) (SBAR (IN that) (S (NP (DT the) (NN base)) (VP (AUX is) (VP (VBN 2.When) (SBAR (S (NP (DT the) (NN base)) (VP (AUX is) (NP (CD 2)) (, ,) (S (NP (PRP we)) (VP (VBP represent) (S (VP (VBG using) (NP (NP (CD two) (NNS numbers)) (NP (RB only) (CD 0) (CC and) (CD 1))))))))))))))) (. .)))
#Rule:Nouns
r1LittleNNP
r1bottomNN
r1baseNN
r1baseNN
r1numbersNNS

#Rule:Verbs
r2impliesVBZ
r22.whenVBN
r2representVBP
r2usingVBG

#Rule:Adjs
r4nextJJ
r4rightJJ

#Rule:Adj-Noun
r52CDLittleNNP
r5rightJJbottomNN
r5twoCDnumbersNNS
r51CD0CD

#Rule:HeadNoun-V
r11LittleNNPimpliesVBZ
r11baseNNisAUX
r11wePRPrepresentVBP

#Rule:V-HeadNoun
r21isAUX2CD
r21usingVBGnumbersNNS

#Rule:V-HeadNoun
r22isAUXwePRP

#Rule:V-HeadNoun(passive)
r232.whenVBNbaseNN

#Rule:V-IN-V
r43impliesVBZthatIN2.whenVBN

#Rule:IS-RULE
r472CDbaseNN

#To convert to base 10 ,we multiply each of the digit starting from the right with powers of 2 (from 2^0) .as shown below and then finally add all the values you got. 
#(S1 (S (S (VP (TO To) (VP (VB convert) (PP (TO to) (NP (JJ base) (CD 10)))))) (, ,) (NP (PRP we)) (VP (VP (VB multiply) (NP (NP (DT each)) (PP (IN of) (NP (DT the) (NN digit)))) (PP (VBG starting) (PP (IN from) (NP (NP (DT the) (NN right)) (PP (IN with) (NP (NP (NNS powers)) (PP (IN of) (NP (NP (NP (CD 2)) (PRN (-LRB- -LRB-) (PP (IN from) (NP (CD 2^0))) (-RRB- -RRB-)) (NNS .as)) (VP (VBN shown) (PP (IN below))))))))))) (CC and) (RB then) (VP (ADVP (RB finally)) (VB add) (NP (NP (PDT all) (DT the) (NNS values)) (SBAR (S (NP (PRP you)) (VP (VBD got))))))) (. .)))
#Rule:Nouns
r1digitNN
r1rightNN
r1powersNNS
r1.asNNS
r1valuesNNS

#Rule:Verbs
r2convertVB
r2multiplyVB
r2startingVBG
r2shownVBN
r2addVB
r2gotVBD

#Rule:Adjs
r4baseJJ

#Rule:Adj-Noun
r5baseJJ10CD

#Rule:HeadNoun-V
r11wePRPmultiplyVB
r11wePRPaddVB
r11youPRPgotVBD

#Rule:NP(NP(z) SBAR(S(NP(x)VP(y))))
r19gotVBDvaluesNNS

#Rule:V-HeadNoun
r21multiplyVBeachDT
r21addVBvaluesNNS

#Rule:V-HeadNoun(passive)
r24shownVBN.asNNS
r24shownVBN2CD

#Rule:PPinNP
r26eachDTofINdigitNN
r26rightNNwithINpowersNNS
r26powersNNSofIN.asNNS
r26powersNNSofIN2CD

#Rule:PPinVP
r30convertVBtoTO10CD

#Rule:V-ADV
r46addVBfinallyRB

#Rule:SubVerbClause
r50wePRPconvertVB

#This is conversion from base 2 to base 10.10100 base 2 1 X 2^4   =  160 X 2^3   =     01 X 2^2   =     40 X 2^1   =     00 X 2^0   =     0                   ------                    20therefore 10100 base 2 = 20 base 10Hope this clears your doubts~~~
#(S1 (S (NP (DT This)) (VP (AUX is) (NP (NN conversion)) (PP (IN from) (NP (NP (NP (NP (NN base) (CD 2)) (PP (TO to) (NP (NN base) (CD 10.10100) (NN base))) (QP (CD 2) (CD 1) (SYM X) (CD 2^4) (SYM =) (CD 160) (SYM X) (RB 2^3) (SYM =) (CD 01) (SYM X) (CD 2^2) (SYM =) (CD 40) (SYM X) (CD 2^1) (SYM =) (CD 00) (SYM X) (CD 2^0) (SYM =) (CD 0) (CD ------))) (JJ 20therefore)) (NP (CD 10100) (NN base)) (NP (CD 2) (SYM =)))) (NP (CD 20) (NN base)) (S (NP (NN 10Hope)) (DT this) (VP (VBZ clears) (NP (PRP$ your) (NN doubts~~~)))))))
#Rule:Nouns
r1conversionNN
r1baseNN
r1baseNN
r1baseNN
r1baseNN
r1baseNN
r110HopeNN
r1doubts~~~NN

#Rule:Verbs
r2clearsVBZ

#Rule:Adjs
r420thereforeJJ

#Rule:Adj-Noun
r520thereforeJJbaseNN
r52CDbaseNN
r51CDbaseNN
r52^4CDbaseNN
r5160CDbaseNN
r52^3   =     01 X 2^2   =     40 X 2^1   =     00 X 2^0   =PersonAnnotationbaseNN
r50CDbaseNN
r5------CDbaseNN
r52CDbaseNN
r510.10100CDbaseNN
r510100CDbaseNN
r520CDbaseNN

#Rule:PRP-Noun
r6yourPRP$doubts~~~NN

#Rule:HeadNoun-V
r11thisDTisAUX
r1110HopeNNclearsVBZ

#Rule:V-HeadNoun
r21isAUXconversionNN
r21isAUXbaseNN
r21clearsVBZdoubts~~~NN

#Rule:V-HeadNoun
r22isAUX10HopeNN

#Rule:PPinNP
r26baseNNtoTObaseNN

#Rule:PPinVP
r30isAUXfromINbaseNN
r30isAUXfromINbaseNN
r30isAUXfromIN2CD

@lemmas-left	using	little	imply	show	2^3   =     01 X 2^2   =     40 X 2^1   =     00 X 2^0   =	values	.as	power	right	be	get	shown	20therefore	digit	2	1	10.10100	0	10100	start	160	bottom	each	this	got	2^4	we	hope	powers	conversion	2.when	implies	next	use	convert	------	add	clear	20	numbers	starting	10Hope	doubts~~~	is	your	as	Little	multiply	you	represent	two	clears	base	
@lemmas-right	powers	conversion	2.when	implies	convert	imply	little	finally	add	clear	values	.as	numbers	power	10Hope	doubts~~~	be	is	get	Little	as	multiply	represent	digit	2	10	0	clears	base	bottom	each	got	hope	we	
@lemmas-center	to	of	that	with	from	